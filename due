#!/bin/bash -i

# Copyright 2016, 2020 Matteo Sasso

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

umask 077
set -o errexit
set -o nounset
set -o pipefail
shopt -s failglob
shopt -s extglob

SHOW_FILES=1
ONLY_SHOW_RELEVANT_DATA=1
LIMIT=$((${LINES:-50} - 4))
WIDTH=$((${COLUMNS:-80} - 1))
SORT_KEY=1
XDEV="-xdev"
PROGRESS=1

space_threshold=100000
files_threshold=10000
r=0

space_suffixes=(" KB" " MB" " GB" " TB" " PB" " EB")
#space_suffixes=(k m g t p e)
files_suffixes=("" k m g)
declare -a paths
paths=()
declare -a excludes=(-false)
declare -a exclude_tags=(-false)

if [[ ! -t 1 ]]
then PROGRESS=0
fi

function die() {
    echo "$@" >&2
    exit 1
}

function humanize() {
    declare -i size=$1
    shift
    suffixes=("${@}")
    declare -i s_idx=0
    while [[ $size -ge 1000 ]]
    do s_idx+=1
       if [[ $size -lt 9950 ]]
       then echo "$(((size+50)/1000)).$(((size+50)/100 % 10))${suffixes[$s_idx]}"
            return 0
       else size=$(((size+500)/1000))
       fi
    done
    echo "$size${suffixes[$s_idx]}"
}

function dehumanize() {
    arg="$1"
    n="${arg%%*([^0-9])}"
    suffix="${arg##*([0-9])}"
    case "${suffix:0:1}" in
    [kK]) exp=1;;
    [mM]) exp=2;;
    [gG]) exp=3;;
    [tT]) exp=4;;
    [pP]) exp=5;;
    [eE]) exp=6;;
    *) die "Unknown suffix: $suffix";;
    esac
    for ((i=0; i<$exp; i++))
    do n=$((n*1000))
	  done
	  echo $n
}

belongs_to() {
  needle="$1"
  shift
  for x; do
    if [[ "$needle" == "$x" ]]; then
      return 0
    fi
  done
  return 1
}

included_in() {
  belongs_to "$@"
}

function parse_cmdline() {
  GETOPT="$(getopt -o S:F:l:s:xX:T: --longoptions size:,files:,limit:,sort:,xdev,exclude:,exclude-tag: -n "$(basename "$0")" -- "$@")"
  eval set -- "$GETOPT"

  while true; do
    case "$1" in
      -S|--size)
        [[ "$2" =~ ^[0-9]+$ ]] && die "ERROR: no suffix to $1 argument"
        [[ "$2" =~ ^[0-9]+[kKmMgGtTpPeE][bB]?$ ]] || die "ERROR: non-numeric argument to $1"
        space_threshold=$(dehumanize "$2")
        space_threshold=$((space_threshold / 1000))  # => kb
        shift 2
        ;;
      -F|--files)
        # [[ "$2" =~ ^[0-9]+$ ]] && die "ERROR: no suffix to $1 argument"
        [[ "$2" =~ ^[0-9]+[kKmMgGtTpPeE]?$ ]] || die "ERROR: non-numeric argument to $1"
        if [[ "$2" =~ ^[0-9]+$ ]]; then
          files_threshold="$2"
        else
          files_threshold=$(dehumanize "$2")
        fi
        SORT_KEY=2
        shift 2
        ;;
      -l|--limit)
        LIMIT=$2
        shift 2
        ;;
      -s|--sort)
        case $2 in
          s) SORT_KEY=1;;
          f) SORT_KEY=2;;
          *) die "Unknown sort field '$2'"
        esac
        shift 2
        ;;
      -x|--xdev)
        XDEV=""
        shift
        ;;
      -X|--exclude)
        excludes+=(-or -path "$2")
        shift 2
        ;;
      -T|--exclude-tag)
        exclude_tags+=(-or -execdir test -e {}/"$2" \;)
        shift 2
        ;;
      --) shift; break;;
      -*) die "Internal error: unknown option: $1";;
      *) die "Internal error: getopt not working as expected";;
    esac
  done
  paths=("$@")
}

[[ ${BASH_VERSINFO[0]} -ge 4 ]] || die "ERROR: this version of bash doesn't support associative arrays. Version 4 or better is required."
find_version="$(find --version | head -n 1)"
[[ "$find_version" =~ BusyBox ]] && die "ERROR: busybox is not supported."
[[ "$find_version" =~ GNU\ findutils ]] || die "ERROR: only GNU findutils versions of find is supported."

parse_cmdline "$@"

if [[ ${#paths[@]} -eq 0 ]]
then paths+=(.)
fi

# echo "$space_threshold $files_threshold $LIMIT $XDEV -- ${paths[@]} -- ${excludes[@]}" >&2

declare -iA space files
declare -i s f

if [[ $PROGRESS -gt 0 && "$(uname -o)" != "Cygwin" ]]
then read -r -d '' watch_script <<-'EOF' || :
        t=0
        while IFS= read -r f
        do t2=$(date +%s%N)
           if [[ $((t2 - t)) -gt 100000000 ]]
           then t=$t2
                echo -ne "\033[2K\033[G${f:0:$WIDTH}" >&2
           fi
        done
EOF
else read -r -d '' watch_script <<-'EOF' || :
        t=0
        while IFS= read -r f
        do :
        done
EOF
fi

# HACK: should we export WIDTH instead?
watch_script="${watch_script//\$WIDTH/$WIDTH}"

echo "$(date) Examining filesystem..." >&2
while read t s && IFS= read -r parent && IFS= read -r name  # file type & disk space used (in kb) / directory / filename
do if [[ "$name" == "/" ]]  # Corner case: /
   then fullpath="/"
        parent="/"
   elif [[ -z "$parent" ]]  # Corner case: children of /
   then fullpath="/$name"
        parent="/"
   else fullpath="$parent/$name"
   fi
   case $t in
   f) if [[ $SHOW_FILES -gt 0 && $s -ge $space_threshold ]]
      then space["$fullpath"]+=s
      else space["$parent"]+=s
    fi
    files["$parent"]+=1
    ;;
  d) space["$fullpath"]+=s;;
  *) die "Unknown file type $t for $fullpath";;
  esac
done < <(find "${paths[@]}" $XDEV -mindepth 1 -not \( \( "${exclude_tags[@]:-}" \) -prune \) -not \( \( "${excludes[@]:-}" \) -prune \) \( -type d -fprint /dev/stderr -false \) -or \( -type f -or -type d \) -printf "%y %k\n%h\n%f\n" 2> >(bash -c "$watch_script") || r=$?)

echo -ne "\033[2K\033[G" >&2

# TODO: in certain cases parent of $basedir is in $space and needs to be removed, other times it isn't.
#       Why is that? I need to pay more attention to corner cases
echo "$(date) Analyzing..." >&2
while IFS= read -r fullpath
do s=${space["$fullpath"]}
   f=${files["$fullpath"]:-0}
   parent="${fullpath%/*}"
   if [[ -z "$parent" ]]  # Corner case: children of /
   then parent="/"
   fi
   [[ $s -lt $space_threshold ]] && space["$parent"]+=s
   [[ $f -lt $files_threshold ]] && files["$parent"]+=f
   [[ $s -lt $space_threshold && $f -lt $files_threshold ]] && unset 'space[$fullpath]'
done < <(for p in "${!space[@]}"
		 do echo "${#p} $p"
		 done \
		 | sort -rn \
		 | sed -e '$d' \
		 | sed -re 's/^[^ ]* //')

echo "$(date) Done." >&2

printf "%6s  %5s  %s\n" "SPACE" "FILES" "PATH"
[[ "${#space[@]}" -eq $((LIMIT+1)) ]] && LIMIT=$((LIMIT+1))
for d in "${!space[@]}"
do echo "${space[$d]} ${files[$d]:-0} $d"
done \
| sort -rn \
| head -n $LIMIT \
| while read s f p
  do if [[ $ONLY_SHOW_RELEVANT_DATA -gt 0 && $s -lt $space_threshold ]] && ! included_in "$p" "${paths[@]}"
     then size_text=""
     else size_text="$(humanize $s "${space_suffixes[@]}")"
     fi
     if [[ $ONLY_SHOW_RELEVANT_DATA -gt 0 && $f -lt $files_threshold ]] && ! included_in "$p" "${paths[@]}"
     then files_text=""
     else files_text="$(humanize $f "${files_suffixes[@]}")"
     fi
     printf "%6s  %5s  %s\n" "$size_text" "$files_text" "$p"
  done

if [[ "${#space[@]}" -gt $LIMIT ]]
then echo "       ($((${#space[@]} - LIMIT)) more entries)"
fi
